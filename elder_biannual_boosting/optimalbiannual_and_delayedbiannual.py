#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug 20 11:56:12 2024

@author: hayley
"""
import numpy as np
import csv
import datetime

"""
Biannual booster analysis for elder population

"""

#location seasonalities
nyseas365dtab = np.array([2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,2.18923,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,1.04813,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.793444,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.530176,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.29019,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.37916,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,0.352237,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,1.72892,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,2.27041,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233,1.70233])
nypandemicseas = np.array([0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.73569672, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.462569845, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.404522259, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.559552349, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 0.844977037, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.293989374, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 1.545866427, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.848447257, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 0.733392772, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.576709303, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.928840383, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816, 1.030064816])
stockholmseas = np.array([2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.08812,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,2.11653,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.88864,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,1.17475,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.757615,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.511294,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.164676,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.117294,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.139684,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.260846,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,0.720408,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213,2.1213])
southkoreaseas = np.array([1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.63812,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,1.14612,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.648758,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.671332,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.434906,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.354834,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.232998,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.230304,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.237821,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,0.809992,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,2.2432,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986,3.34986])
yamagataseas = np.array([2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.01258,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.81213,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,2.1538,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.987499,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.67142,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.23939,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.561964,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.314977,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.233579,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.525674,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.916731,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267,0.693267])
nepalseas = np.array([1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,1.81528,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,2.3798,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,1.06649,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,0.677785,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,1.03612,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.743937,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.259113,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.571167,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.783551,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.893222,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.990277,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831,0.890831])
guangzhouseas = np.array([1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515])
norwayseas = np.array([1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,1.80119,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,2.02221,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.27319,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,1.03442,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.518952,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.398255,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.317029,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.205419,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.296427,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,0.486994,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,1.57732,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515,2.14515])
netherlandsseas = np.array([1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.23293,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.39519,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.36195,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.25731,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,1.18334,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.847563,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.677802,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.646773,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.563029,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.767949,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,0.865048,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429,1.22429])
swedenseas = np.array([2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.2488,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,2.34727,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,1.36649,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.655298,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.726206,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.817397,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.340597,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.317382,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.25335,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.743617,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,0.416772,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729,1.83729])
israealseas = np.array([0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,0.594062,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,2.5347*10**-13,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.28387,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,1.15119,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,2.00854,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.535003,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,0.160566,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,1.87172,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.581709,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,0.939654,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.63252,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117,1.14117])
edinburghseas = np.array([1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,1.34971,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,2.96112,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.76809,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,1.04806,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.614099,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.432253,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,0.0670387,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,2.59129*10**-13,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.247816,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,0.469801,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.52495,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275,1.68275])

#probabilities of infection
postboost = np.array([0,1.04127*10**-6,2.13879*10**-6,3.29624*10**-6,4.51754*10**-6,5.80682*10**-6,7.16847*10**-6,8.60709*10**-6,0.0000101275,0.0000117348,0.0000134343,0.0000152315,0.0000171321,0.0000191422,0.0000212679,0.0000235157,0.0000258923,0.0000284045,0.0000310596,0.0000338652,0.0000368289,0.0000399588,0.0000432636,0.0000467519,0.0000504331,0.000054317,0.0000584137,0.0000627341,0.0000672896,0.0000720924,0.0000771553,0.000082492,0.0000881175,0.0000940484,0.000100305,0.00010691,0.000113888,0.000121265,0.000129072,0.000137342,0.00014611,0.000155417,0.000165305,0.000175821,0.000187012,0.000198921,0.000211592,0.00022507,0.000239401,0.00025463,0.000270806,0.000287978,0.000306197,0.000325516,0.00034599,0.00036768,0.000390648,0.000414962,0.000440697,0.000467935,0.000495635,0.000523804,0.000552448,0.000581572,0.000611182,0.000641284,0.000671884,0.000702988,0.000734602,0.000766731,0.000799383,0.000832563,0.000866277,0.000900531,0.000935331,0.000970684,0.0010066,0.00104307,0.00108012,0.00111775,0.00115596,0.00119476,0.00123416,0.00127416,0.00131477,0.001356,0.00139785,0.00144033,0.00148344,0.0015272,0.00157161,0.00161667,0.00166239,0.00170879,0.00175586,0.00180361,0.00185205,0.00190119,0.00195103,0.00200158,0.00205284,0.00210483,0.00215755,0.00221101,0.00226521,0.00232016,0.00237587,0.00243235,0.00248959,0.00254762,0.00260643,0.00266603,0.00272644,0.00278765,0.00284967,0.00291252,0.00297619,0.0030407,0.00310605,0.00317225,0.0032393,0.00330722,0.00337601,0.00344568,0.00351623,0.00358767,0.00366002,0.00373326,0.00380743,0.00388251,0.00395852,0.00403547,0.00411336,0.00419219,0.00427199,0.00435275,0.00443447,0.00451718,0.00460087,0.00468555,0.00477124,0.00485792,0.00494563,0.00503435,0.0051241,0.00521489,0.00530672,0.00539959,0.00549353,0.00558853,0.00568459,0.00578174,0.00587997,0.00597929,0.00607971,0.00618124,0.00628388,0.00638764,0.00649252,0.00659854,0.0067057,0.00681401,0.00692347,0.0070341,0.00714589,0.00725885,0.007373,0.00748834,0.00760488,0.00772261,0.00784156,0.00796172,0.0080831,0.00820572,0.00832957,0.00845466,0.008581,0.0087086,0.00883746,0.00896759,0.009099,0.00923168,0.00936566,0.00950093,0.0096375,0.00977538,0.00991458,0.0100551,0.0101969,0.0103401,0.0104846,0.0106305,0.0107777,0.0109263,0.0110762,0.0112275,0.0113802,0.0115342,0.0116897,0.0118465,0.0120048,0.0121644,0.0123255,0.0124879,0.0126518,0.0128172,0.0129839,0.0131521,0.0133218,0.0134928,0.0136654,0.0138394,0.0140149,0.0141918,0.0143703,0.0145502,0.0147316,0.0149145,0.0150989,0.0152848,0.0154722,0.0156611,0.0158515,0.0160435,0.016237,0.016432,0.0166285,0.0168266,0.0170263,0.0172275,0.0174302,0.0176345,0.0178404,0.0180479,0.0182569,0.0184675,0.0186797,0.0188935,0.0191088,0.0193258,0.0195443,0.0197645,0.0199863,0.0202096,0.0204346,0.0206613,0.0208895,0.0211193,0.0213508,0.021584,0.0218187,0.0220551,0.0222932,0.0225329,0.0227742,0.0230172,0.0232618,0.0235082,0.0237561,0.0240058,0.0242571,0.0245101,0.0247647,0.0250211,0.0252791,0.0255388,0.0258001,0.0260632,0.026328,0.0265944,0.0268626,0.0271324,0.027404,0.0276772,0.0279522,0.0282289,0.0285072,0.0287873,0.0290691,0.0293526,0.0296379,0.0299248,0.0302135,0.0305039,0.030796,0.0310898,0.0313854,0.0316827,0.0319817,0.0322824,0.0325849,0.0328891,0.0331951,0.0335028,0.0338122,0.0341234,0.0344363,0.0347509,0.0350673,0.0353854,0.0357052,0.0360268,0.0363502,0.0366753,0.0370021,0.0373307,0.037661,0.0379931,0.0383269,0.0386624,0.0389997,0.0393388,0.0396795,0.0400221,0.0403663,0.0407124,0.0410601,0.0414096,0.0417609,0.0421139,0.0424686,0.0428251,0.0431834,0.0435433,0.043905,0.0442685,0.0446337,0.0450006,0.0453693,0.0457397,0.0461118,0.0464857,0.0468613,0.0472386,0.0476177,0.0479985,0.048381,0.0487653,0.0491513,0.049539,0.0499284,0.0503195,0.0507124,0.051107,0.0515033,0.0519013,0.0523011,0.0527025,0.0531057,0.0535105,0.0539171,0.0543254,0.0547354,0.055147,0.0555604,0.0559755,0.0563922,0.0568107,0.0572308,0.0576526,0.0580761,0.0585013,0.0589282,0.0593567,0.0597869])
increasingboost=  np.array([0.0499284,0.0474379,0.0449474,0.0424568,0.0399663,0.0374758,0.0349853,0.0324948,0.0287511,0.0250075,0.0212639,0.0175202,0.0137766,0.0100329,0.00628931,0.00566038,0.00503145,0.00440252,0.00377358,0.00314465,0.00251572,0.00188679,0.00125786,0.000628931,0])
#postboost + increasing boost first
postboost2 = np.array([0.0499284,0.0474379,0.0449474,0.0424568,0.0399663,0.0374758,0.0349853,0.0324948,0.0287511,0.0250075,0.0212639,0.0175202,0.0137766,0.0100329,0.00628931,0.00566038,0.00503145,0.00440252,0.00377358,0.00314465,0.00251572,0.00188679,0.00125786,0.000628931,0,1.04127*10**-6,2.13879*10**-6,3.29624*10**-6,4.51754*10**-6,5.80682*10**-6,7.16847*10**-6,8.60709*10**-6,0.0000101275,0.0000117348,0.0000134343,0.0000152315,0.0000171321,0.0000191422,0.0000212679,0.0000235157,0.0000258923,0.0000284045,0.0000310596,0.0000338652,0.0000368289,0.0000399588,0.0000432636,0.0000467519,0.0000504331,0.000054317,0.0000584137,0.0000627341,0.0000672896,0.0000720924,0.0000771553,0.000082492,0.0000881175,0.0000940484,0.000100305,0.00010691,0.000113888,0.000121265,0.000129072,0.000137342,0.00014611,0.000155417,0.000165305,0.000175821,0.000187012,0.000198921,0.000211592,0.00022507,0.000239401,0.00025463,0.000270806,0.000287978,0.000306197,0.000325516,0.00034599,0.00036768,0.000390648,0.000414962,0.000440697,0.000467935,0.000495635,0.000523804,0.000552448,0.000581572,0.000611182,0.000641284,0.000671884,0.000702988,0.000734602,0.000766731,0.000799383,0.000832563,0.000866277,0.000900531,0.000935331,0.000970684,0.0010066,0.00104307,0.00108012,0.00111775,0.00115596,0.00119476,0.00123416,0.00127416,0.00131477,0.001356,0.00139785,0.00144033,0.00148344,0.0015272,0.00157161,0.00161667,0.00166239,0.00170879,0.00175586,0.00180361,0.00185205,0.00190119,0.00195103,0.00200158,0.00205284,0.00210483,0.00215755,0.00221101,0.00226521,0.00232016,0.00237587,0.00243235,0.00248959,0.00254762,0.00260643,0.00266603,0.00272644,0.00278765,0.00284967,0.00291252,0.00297619,0.0030407,0.00310605,0.00317225,0.0032393,0.00330722,0.00337601,0.00344568,0.00351623,0.00358767,0.00366002,0.00373326,0.00380743,0.00388251,0.00395852,0.00403547,0.00411336,0.00419219,0.00427199,0.00435275,0.00443447,0.00451718,0.00460087,0.00468555,0.00477124,0.00485792,0.00494563,0.00503435,0.0051241,0.00521489,0.00530672,0.00539959,0.00549353,0.00558853,0.00568459,0.00578174,0.00587997,0.00597929,0.00607971,0.00618124,0.00628388,0.00638764,0.00649252,0.00659854,0.0067057,0.00681401,0.00692347,0.0070341,0.00714589,0.00725885,0.007373,0.00748834,0.00760488,0.00772261,0.00784156,0.00796172,0.0080831,0.00820572,0.00832957,0.00845466,0.008581,0.0087086,0.00883746,0.00896759,0.009099,0.00923168,0.00936566,0.00950093,0.0096375,0.00977538,0.00991458,0.0100551,0.0101969,0.0103401,0.0104846,0.0106305,0.0107777,0.0109263,0.0110762,0.0112275,0.0113802,0.0115342,0.0116897,0.0118465,0.0120048,0.0121644,0.0123255,0.0124879,0.0126518,0.0128172,0.0129839,0.0131521,0.0133218,0.0134928,0.0136654,0.0138394,0.0140149,0.0141918,0.0143703,0.0145502,0.0147316,0.0149145,0.0150989,0.0152848,0.0154722,0.0156611,0.0158515,0.0160435,0.016237,0.016432,0.0166285,0.0168266,0.0170263,0.0172275,0.0174302,0.0176345,0.0178404,0.0180479,0.0182569,0.0184675,0.0186797,0.0188935,0.0191088,0.0193258,0.0195443,0.0197645,0.0199863,0.0202096,0.0204346,0.0206613,0.0208895,0.0211193,0.0213508,0.021584,0.0218187,0.0220551,0.0222932,0.0225329,0.0227742,0.0230172,0.0232618,0.0235082,0.0237561,0.0240058,0.0242571,0.0245101,0.0247647,0.0250211,0.0252791,0.0255388,0.0258001,0.0260632,0.026328,0.0265944,0.0268626,0.0271324,0.027404,0.0276772,0.0279522,0.0282289,0.0285072,0.0287873,0.0290691,0.0293526,0.0296379,0.0299248,0.0302135,0.0305039,0.030796,0.0310898,0.0313854,0.0316827,0.0319817,0.0322824,0.0325849,0.0328891,0.0331951,0.0335028,0.0338122,0.0341234,0.0344363,0.0347509,0.0350673,0.0353854,0.0357052,0.0360268,0.0363502,0.0366753,0.0370021,0.0373307,0.037661,0.0379931,0.0383269,0.0386624,0.0389997,0.0393388,0.0396795,0.0400221,0.0403663,0.0407124,0.0410601,0.0414096,0.0417609,0.0421139,0.0424686,0.0428251,0.0431834,0.0435433,0.043905,0.0442685,0.0446337,0.0450006,0.0453693,0.0457397,0.0461118,0.0464857,0.0468613,0.0472386,0.0476177,0.0479985,0.048381,0.0487653,0.0491513,0.049539,0.0499284,0.0503195,0.0507124,0.051107,0.0515033,0.0519013,0.0523011,0.0527025,0.0531057,0.0535105,0.0539171,0.0543254,0.0547354,0.055147,0.0555604,0.0559755,0.0563922,0.0568107,0.0572308,0.0576526,0.0580761,0.0585013,0.0589282,0.0593567,0.0597869])

def doubleboost(seasonality,filename):
    nydicty={}
    mean_boost={}
    all_pairs={}
    #iterate through each booster day in a year
    for i in range(0,len(seasonality)):
        means=[]
        #iterate through each day in the year for a specific booster day
        curr_days=[]
        for t in range(0,len(seasonality)):    
            if t == 0: #first day you dont take into account the previous day
                curr_day=1-((1-postboost[-1])*seasonality[t]*postboost[t])
            else: #multiply seasonality by reinfection prob and by previous day
                curr_day=1-(curr_days[-1]*seasonality[t]*postboost[t])
            curr_days.append(curr_day)
            curr_days2 = list(curr_days)
            cnt=0
            if t == 52 and i ==264:
                print("hi")
            for s in range(t+1,len(seasonality)): #start day after t
                #determine where in the increasing boost to start
                start=np.argmax(increasingboost < postboost[t])
                curr_day2=1-(curr_days2[-1]*seasonality[s]*postboost2[start+cnt])#start at later seasonality but increasing boost+days post increase
                curr_days2.append(curr_day2)
                cnt+=1
            day = i+t+1
            if day>365:
                day=day-365
            mean_boost[np.mean(1-np.array(curr_days2))]=i,day
            all_pairs[i,day]=np.array(curr_days2)
            means.append(np.mean(1-np.array(curr_days2)))
        #roll means such that the first day is always jan 1
        meansrolled=list(np.roll(means, i))
        nydicty[i]=meansrolled
        seasonality  = np.roll(seasonality, -1)
        print("finished "+str(i)+" days")
    print(mean_boost[min(mean_boost)])
    wd = "~/elder_boostertime/results/"
    with open(wd+f'{filename}_heat2.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=',')
        for key, value in nydicty.items():
            if not isinstance(value, list):
                value = [value]  # Convert single values to a list
            writer.writerow(value)
    lowest=100
    day =[0,0]
    for i in range(len(nydicty)):
        for t in range(len(nydicty[i])):
            if nydicty[i][t]<lowest:
                lowest=nydicty[i][t]
                day=[t,i]
    print(day)
    return mean_boost[min(mean_boost)],all_pairs

#Run for each location
nyoptimal_pair,nyoptimaldual_year_pairs = doubleboost(nyseas365dtab, "nyseas365dtab") 
nypandoptimal_pair,nypandoptimaldual_year_pairs = doubleboost(nypandemicseas, "nypandemicseas")
stockholmoptimal_pair,stockholmoptimaldual_year_pairs= doubleboost(stockholmseas,"stockholmseas")
southkoreaoptimal_pair,southkoreaoptimaldual_year_pairs= doubleboost(southkoreaseas, "southkoreaseas")
yamagataoptimal_pair,yamagataoptimaldual_year_pairs= doubleboost(yamagataseas, "yamagataseas") 
nepaloptimal_pair,nepaloptimaldual_year_pairs = doubleboost(nepalseas, "nepalseas")
guangzhouoptimal_pair,guangzhouoptimaldual_year_pairs= doubleboost(guangzhouseas,"guangzhouseas")
norwayoptimal_pair,norwayoptimaldual_year_pairs=doubleboost(norwayseas, "norwayseas")
netherlandsoptimal_pair,netherlandsoptimaldual_year_pairs=doubleboost(netherlandsseas, "netherlandsseas")
swedenoptimal_pair,swedenoptimaldual_year_pairs=doubleboost(swedenseas, "swedenseas")
israeloptimal_pair,israeloptimaldual_year_pairs=doubleboost(israealseas, "israealseas")
edinburghoptimal_pair,edinburghoptimaldual_year_pairs=doubleboost(edinburghseas,"edinburghseas")

"""
Analysis for optimal paired date if original best date is missed, supplementary table 1

"""

#rotate each seasonality to begin at optimal date identified in previous analysis
nyseas365dtab=np.roll(nyseas365dtab, -264)
nypandemicseas = np.roll(nypandemicseas, -273)
stockholmseas = np.roll(stockholmseas, -292)
southkoreaseas = np.roll(southkoreaseas, -271)
yamagataseas = np.roll(yamagataseas, -357)
nepalseas =np.roll(nepalseas, -362)
guangzhouseas = np.roll(guangzhouseas, -267)
norwayseas = np.roll(norwayseas, -267)
netherlandsseas =np.roll(netherlandsseas, -271) 
swedenseas = np.roll(swedenseas, -327)
israealseas = np.roll(israealseas, -59)
edinburghseas = np.roll(edinburghseas, -263)

def delayeddoubleboost(seasonality, filename):
    nydicty = {}
    mean_boost = {}
    all_pairs = {}
    
    # Iterate through each possible first booster day in a year
    for i in range(0, len(seasonality)):
        means = []
        
        # Calculate days remaining in year after first boost
        days_remaining = len(seasonality) - i
        
        # Only iterate through subsequent days (from first boost until end of year)
        curr_days = []
        for t in range(0, days_remaining):
            if t == 0:  # First day you don't take into account the previous day
                curr_day = 1 - ( seasonality[i + t] * postboost[t])
            else:  # Multiply seasonality by reinfection prob and by previous day
                curr_day = 1 - (curr_days[-1] * seasonality[i + t] * postboost[t])
            curr_days.append(curr_day)
            
            # Test what happens if second boost given on this day
            curr_days2 = list(curr_days)
            cnt = 0
            
            # Project forward from this potential second boost day until end of year
            for s in range(i + t + 1, len(seasonality)):
                # Determine where in the increasing boost to start
                start = np.argmax(increasingboost < postboost[t])
                curr_day2 = 1 - (curr_days2[-1] * seasonality[s] * postboost2[start + cnt])
                curr_days2.append(curr_day2)
                cnt += 1
            
            # Calculate the actual calendar day for second boost
            second_boost_day = i + t
            if second_boost_day >= 365:
                second_boost_day = second_boost_day - 365
            
            # Store results
            mean_protection = np.mean(1 - np.array(curr_days2))
            mean_boost[mean_protection] = (i, second_boost_day)
            all_pairs[(i, second_boost_day)] = np.array(curr_days2)
            means.append(mean_protection)
        
        # Pad means with NaN for days where no second boost is possible
        # (to maintain consistent array size for heatmap)
        means_padded = means + [np.nan] * (len(seasonality) - days_remaining)
        nydicty[i] = means_padded
        
        print(f"Finished day {i} (tested {days_remaining} second boost options)")
    
    # Find optimal strategy
    print(f"Optimal booster pair: {mean_boost[min(mean_boost)]}")
    
    # Save results to CSV
    wd = "/Users/elder_boostertime/results/"
    with open(wd + f'{filename}_heat3.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=',')
        for key, value in nydicty.items():
            if not isinstance(value, list):
                value = [value]
            writer.writerow(value)
    
    # Find lowest protection value and its corresponding day pair
    lowest = 100
    day_pair = [0, 0]
    for i in range(len(nydicty)):
        for t in range(len(nydicty[i])):
            if not np.isnan(nydicty[i][t]) and nydicty[i][t] < lowest:
                lowest = nydicty[i][t]
                day_pair = [i, i + t]  # First boost day, second boost day
    
    print(f"Lowest protection day pair: First boost day {day_pair[0]}, Second boost day {day_pair[1]}")
    
    # Find best second booster day for each first booster day
    best_second_boost = {}
    print(f"\nTotal pairs in all_pairs: {len(all_pairs)}")
    print(f"Sample keys from all_pairs: {list(all_pairs.keys())[:5]}")
    
    for first_day in range(len(seasonality)):
        # Find all pairs with this first day
        candidates = {}
        for (day1, day2), trajectory in all_pairs.items():
            if day1 == first_day:
                mean_val = np.mean(trajectory)
                candidates[day2] = mean_val
        
        # Find the second day with lowest mean
        if candidates:
            best_second_day = max(candidates, key=candidates.get)
            best_second_boost[first_day] = {
                'second_boost_day': best_second_day,
                'mean_protection': candidates[best_second_day]
            }
            if first_day % 50 == 0:  # Print every 50th day to reduce output
                print(f"First boost day {first_day}: Best second boost on day {best_second_day} (mean protection: {candidates[best_second_day]:.4f})")
    
    print(f"\nTotal best pairs found: {len(best_second_boost)}")
    
    # Export best pairs to CSV
    csv_path = wd + f'{filename}_secondbestpairs.csv'
    print(f"Writing to: {csv_path}")
    with open(csv_path, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=',')
        writer.writerow(['first_boost_day', 'second_boost_day', 'mean_protection'])
        for first_day, info in best_second_boost.items():
            writer.writerow([first_day, info['second_boost_day'], info['mean_protection']])
    
    print(f"Exported best pairs to {wd}ny_secondbestpairs.csv")
    
    return best_second_boost
      
#Run for each location
nydelayedbest = delayeddoubleboost(nyseas365dtab, "nyseas365dtab")
nypanddelayedbest = delayeddoubleboost(nypandemicseas, "nypandemicseas")
stockholmdelayedbest= delayeddoubleboost(stockholmseas,"stockholmseas")
southkoreadelayedbest= delayeddoubleboost(southkoreaseas, "southkoreaseas")
yamagatadelayedbest= delayeddoubleboost(yamagataseas, "yamagataseas") 
nepaldelayedbest = delayeddoubleboost(nepalseas, "nepalseas")
guangzhoudelayedbest= delayeddoubleboost(guangzhouseas,"guangzhouseas")
norwaydelayedbest= delayeddoubleboost(norwayseas, "norwayseas")
netherlandsdelayedbest=delayeddoubleboost(netherlandsseas, "netherlandsseas")
swedendelayedbest=delayeddoubleboost(swedenseas, "swedenseas")
israeldelayedbest=delayeddoubleboost(israealseas, "israealseas")
edinburghdelayedbest=delayeddoubleboost(edinburghseas,"edinburghseas")
    
    